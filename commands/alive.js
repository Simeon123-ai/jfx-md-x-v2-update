const fs = require('fs');
const path = require('path');
const settings = require("../settings");

async function aliveCommand(sock, chatId, message) {
    try {
        const message1 = `

> *Status:* ·¥è…¥ ü…™…¥·¥á
> *Mode:* ·¥ò·¥ú ô ü…™·¥Ñ
> *Version:* ${settings.version}

‚îè‚îÅ üåü *Features* ‚îÅ
‚îÉ ‚Ä¢ …¢ Ä·¥è·¥ú·¥ò ·¥ç·¥Ä…¥·¥Ä…¢·¥á·¥ç·¥á…¥·¥õ
‚îÉ ‚Ä¢ ·¥Ä…¥·¥õ…™ ü…™…¥·¥ã ·¥ò Ä·¥è·¥õ·¥á·¥Ñ·¥õ…™·¥è…¥
‚îÉ ‚Ä¢ Íú∞·¥ú…¥ ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥ÖÍú±
‚îÉ ‚Ä¢ ·¥Ä…¥·¥Ö ·¥ç·¥è Ä·¥á!
‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üìé ·¥õ è·¥ò·¥á *.menu* Íú∞·¥è Ä Íú∞·¥ú ü ü ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö  ü…™Íú±·¥õ`;

        // üìÇ Pick random image from assets folder
        const assetsDir = path.join(__dirname, '../assets');
        let files = [];
        try {
            files = fs.readdirSync(assetsDir)
                .filter(file => /\.(jpg|jpeg|png|gif)$/i.test(file)); // Only image files
        } catch (err) {
            console.error('‚ùå Failed to read assets folder:', err);
        }

        let imageBuffer = null;
        if (files.length > 0) {
            const randomImage = files[Math.floor(Math.random() * files.length)];
            const imagePath = path.join(assetsDir, randomImage);
            imageBuffer = fs.readFileSync(imagePath);
        }

        // Send with random image if available
        if (imageBuffer) {
            await sock.sendMessage(chatId, {
                image: imageBuffer,
                caption: message1,
                contextInfo: {
                    forwardingScore: 999,
                    isForwarded: true,
                    forwardedNewsletterMessageInfo: {
                        newsletterJid: '120363420646690174@newsletter',
                        newsletterName: '·¥äÍú∞x ·¥ç·¥Ö-x·¥†2',
                        serverMessageId: -1
                    }
                }
            }, { quoted: message });
        } else {
            // Fallback to text only
            await sock.sendMessage(chatId, {
                text: message1,
                contextInfo: {
                    forwardingScore: 999,
                    isForwarded: true,
                    forwardedNewsletterMessageInfo: {
                        newsletterJid: '120363420646690174@newsletter',
                        newsletterName: '·¥äÍú∞x ·¥ç·¥Ö-x·¥†2',
                        serverMessageId: -1
                    }
                }
            }, { quoted: message });
        }

        // üîä Send audio response (like your original flow)
        const audioPath = path.join(__dirname, '../audio/alive.mp3');
        if (fs.existsSync(audioPath)) {
            const audioBuffer = fs.readFileSync(audioPath);
            await sock.sendMessage(chatId, {
                audio: audioBuffer,
                mimetype: 'audio/mpeg',
                ptt: true
            }, { quoted: message });
        }

    } catch (error) {
        console.error('Error in alive command:', error);
        await sock.sendMessage(chatId, { text: 'Bot is alive and running!' }, { quoted: message });
    }
}

module.exports = aliveCommand;
